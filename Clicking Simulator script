local Rayfield = loadstring(game:HttpGet('https://[Log in to view URL]'))()

if game.PlaceId == 18901410614 then

    Rayfield:Notify({
       Title = "Script executed",
       Content = "Script by Devappl",
       Duration = 6.5,
       Image = 4483362458,
       Actions = { -- Notification Buttons
          Ignore = {
             Name = "Okay!",
             Callback = function()
             print("The user tapped Okay!")
          end
       },
    },
    })

local AutoClickToggled = false
    local AutoRebrithToggled = false

local Window = Rayfield:CreateWindow({
       Name = "Clicking Simulator! Script",
       LoadingTitle = "Hub",
       LoadingSubtitle = "by Hunter_Killer2431",
       ConfigurationSaving = {
          Enabled = flase,
          FolderName = nil, -- Create a custom folder for your hub/game
          FileName = "Clickingsimulatorscript"
       },
Discord = {
          Enabled = false,
          Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
          RememberJoins = true -- Set this to false to make them join the discord every time they load it up
       },
KeySystem = false, -- Set this to true to use our key system
       KeySettings = {
          Title = "Clicking Simulator! Script | Key",
          Subtitle = "Enter key",
          Note = "This script is in closed beta, there is currently no way of obtaining a key",
          FileName = "Keysystem", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
          SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
          GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
          Key = {"Test123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
       }
    })


local MainTab = Window:CreateTab("Home", 4483362458) -- Title, Image
    local MainSection = MainTab:CreateSection("Main")

local ClickerTab = Window:CreateTab("Clicker", 4483362458) -- Title, Image
    local ClickerSection = ClickerTab:CreateSection("Clicker")

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
    local PlayerSection = PlayerTab:CreateSection("Player")






    -----[ MAIN TAB ]-----
    

-----[ CLICKER TAB ]------

    local ClickerButton = ClickerTab:CreateButton({
       Name = "Click",
       Callback = function()
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ClickService"):WaitForChild("RF"):WaitForChild("Click"):InvokeServer()
       end,
    })

    local RebirthButton = ClickerTab:CreateButton({
       Name = "Rebirth",
       Callback = function()
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("RebirthService"):WaitForChild("RF"):WaitForChild("RequestRebirth"):InvokeServer(game:GetService("Players").LocalPlayer)
       end,
    })

    local FreeAutoClickerButton = ClickerTab:CreateButton({
       Name = "Free Autoclicker",
       Callback = function()
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ClickService"):WaitForChild("RF"):WaitForChild("ToggleAuto"):InvokeServer()
       end,
    })

    local FreeAutoClickerButton = ClickerTab:CreateButton({
       Name = "Paid Autoclicker",
       Callback = function()
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ClickService"):WaitForChild("RF"):WaitForChild("TogglePaidAuto"):InvokeServer()
       end,
    })

    
    local AutoClickToggle = ClickerTab:CreateToggle({
       Name = "Auto Clicker",
       CurrentValue = false,
       Flag = "autoClicker", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
            AutoClickToggled = not AutoClickToggled
            if AutoClickToggled then
                while AutoClickToggled do
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ClickService"):WaitForChild("RF"):WaitForChild("Click"):InvokeServer()
                end
            end
       end,
    })

    
    local AutoRebirthToggle = ClickerTab:CreateToggle({
       Name = "Auto Rebirth",
       CurrentValue = false,
       Flag = "autoRebirth", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
            AutoRebrithToggled = not AutoRebrithToggled
            if AutoRebrithToggled then
                while AutoRebrithToggled do
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("RebirthService"):WaitForChild("RF"):WaitForChild("RequestRebirth"):InvokeServer(game:GetService("Players").LocalPlayer)
                    wait()  -- Wait for a short duration before repeating
                end
            end
       end,
    })



-----[ PLAYER TAB ]-----

    local SpeedSlider = PlayerTab:CreateSlider({
       Name = "WalkSpeed Slider",
       Range = {1, 250},
       Increment = 1,
       Suffix = "Speed",
       CurrentValue = 16,
       Flag = "speedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
            while wait() do
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
            end
       end,
    })

    local JumpSlider = PlayerTab:CreateSlider({
       Name = "JumpPower Slider",
       Range = {1, 250},
       Increment = 1,
       Suffix = "Power",
       CurrentValue = 11,
       Flag = "jumpSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
            while wait() do
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
            end
       end,
    })

    local InfiniteJumpButton = PlayerTab:CreateButton({
       Name = "Infinite Jump",
       Callback = function()
                loadstring(game:HttpGet("https://[Log in to view URL]"))()
            end,
    })





